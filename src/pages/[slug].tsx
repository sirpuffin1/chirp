import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import Layout from "~/components/Layout";
import Image from 'next/image';
import LoadingPage from "~/components/Loader";
import PostView from "~/components/PostView";

const ProfileFeed = (props: {userId: string}) => {
  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({userId: props.userId})

  if (isLoading) return <LoadingPage />

  if (!data || data.length === 0) return <div>User has not posted.</div>

  return <div className="flex flex-col overflow-y-scroll hide-scrollbar">
    {data.map(fullPost => (<PostView {...fullPost} key={fullPost.post.id}/>))}
  </div>
}


const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data } = api.profile.getUserByUsername.useQuery({
    username,
  });

  if (!data) return <div>404</div>;

  return (
    <>
      <Head>
        <title>{data.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="relative h-36 bg-slate-600">
          <Image
            src={data.profileImage}
            alt={`${data.username ?? ""}'s profile pic`}
            width={128}
            height={128}
            className="absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black bg-black"
          />
          </div>
          <div className="h-[105px]"></div>
        <div className="p-4 text-2xl font-bold">{`@${data.username ?? ""}`}</div>
        <div className="w-full border-b border-slate-400"/>
        <ProfileFeed userId={data.id} />
      </Layout>
    </>
  );
};



import { generateSSGHelper } from "~/server/helpers/ssgHelper";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper()

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("no slug")

  const username = slug.replace("@", "")

  await ssg.profile.getUserByUsername.prefetch({ username })

  return {
    props: {
        trpcState: ssg.dehydrate(),
        username
    },
  };
}

export const getStaticPaths: GetStaticPaths = () => {
    return {
        paths:[],
        fallback: "blocking"
    }
}

export default ProfilePage;
